.TH "LDSqNiederreiter" 3 "20 Jun 2001" "LDSequences" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LDSqNiederreiter \- Implementation of (0,s) nets, according to an algorithm given by Niederreiter using monic polynomials. 
.SH SYNOPSIS
.br
.PP
\fC#include <SimSeqs.h>\fP
.PP
Inherits \fBLDSqBase\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBLDSqNiederreiter\fP (long *b=NULL, long bas=5, long dm=0, long iterations=0, char *ex='nie',char *nm='Niederreiter(t, s)-Sequence')"
.br
.in -1c
.SS "Protected Methods"

.in +1c
.ti -1c
.RI "virtual long \fBCalculateNextElement\fP (long nr, double *buffer, long bufflen)"
.br
.ti -1c
.RI "virtual long \fBInitData\fP (long genau, double genau1)"
.br
.ti -1c
.RI "virtual long \fBExitData\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "long \fBbasis\fP"
.br
.ti -1c
.RI "long \fBmaxnum\fP"
.br
.ti -1c
.RI "long \fBlog_N\fP"
.br
.ti -1c
.RI "\fBint_vektor\fP \fBq\fP"
.br
.ti -1c
.RI "long \fBmax_num\fP"
.br
.ti -1c
.RI "long \fBc\fP [32][32][maxanz]"
.br
.ti -1c
.RI "\fBpolarr\fP \fBmonic_pols\fP"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
Implementation of (0,s) nets, according to an algorithm given by Niederreiter using monic polynomials.
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "LDSqNiederreiter::LDSqNiederreiter (long * b = NULL, long bas = 5, long dm = 0, long iterations = 0, char * ex = 'nie', char * nm = 'Niederreiter (t,s)-Sequence')"
.PP
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "long LDSqNiederreiter::CalculateNextElement (long nr, double * buffer, long bufflen)\fC [protected, virtual]\fP"
.PP
Calculates the next element and stores it to the buffer.
.PP
If bufflen>dim, the remaining dimensions are pseudo-random numbers (i.e. the sequence is a hybrid sequence) This function should never be called directly! Use NextElement(..) instead!!! 
.PP
\fBSee also: \fP
.in +1c
\fBNextElement\fP() 
.PP
Reimplemented from \fBLDSqBase\fP.
.SS "long LDSqNiederreiter::ExitData ()\fC [protected, virtual]\fP"
.PP
Do class-specific freeing of memory etc.
.PP
Called by the destructor 
.PP
Reimplemented from \fBLDSqBase\fP.
.SS "long LDSqNiederreiter::InitData (long genau, double genau1)\fC [protected, virtual]\fP"
.PP
initialize the method specific data.
.PP
Reimplemented from \fBLDSqBase\fP.
.SH "MEMBER DATA DOCUMENTATION"
.PP 
.SS "long LDSqNiederreiter::basis\fC [protected]\fP"
.PP
.SS "long LDSqNiederreiter::c\fC [protected]\fP"
.PP
.SS "long LDSqNiederreiter::log_N\fC [protected]\fP"
.PP
.SS "long LDSqNiederreiter::max_num\fC [protected]\fP"
.PP
.SS "long LDSqNiederreiter::maxnum\fC [protected]\fP"
.PP
.SS "\fBpolarr\fP LDSqNiederreiter::monic_pols\fC [protected]\fP"
.PP
.SS "\fBint_vektor\fP LDSqNiederreiter::q\fC [protected]\fP"
.PP


.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for LDSequences from the source code.