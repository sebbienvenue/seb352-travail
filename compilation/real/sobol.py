# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sobol', [dirname(__file__)])
        except ImportError:
            import _sobol
            return _sobol
        if fp is not None:
            try:
                _mod = imp.load_module('_sobol', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sobol = swig_import_helper()
    del swig_import_helper
else:
    import _sobol
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def i4_bit_hi1(*args):
  return _sobol.i4_bit_hi1(*args)
i4_bit_hi1 = _sobol.i4_bit_hi1

def i4_bit_lo0(*args):
  return _sobol.i4_bit_lo0(*args)
i4_bit_lo0 = _sobol.i4_bit_lo0

def i4_max(*args):
  return _sobol.i4_max(*args)
i4_max = _sobol.i4_max

def i4_min(*args):
  return _sobol.i4_min(*args)
i4_min = _sobol.i4_min

def i4_sobol(*args):
  return _sobol.i4_sobol(*args)
i4_sobol = _sobol.i4_sobol

def i4_sobol_generate(*args):
  return _sobol.i4_sobol_generate(*args)
i4_sobol_generate = _sobol.i4_sobol_generate

def i4_uniform(*args):
  return _sobol.i4_uniform(*args)
i4_uniform = _sobol.i4_uniform

def i8_bit_hi1(*args):
  return _sobol.i8_bit_hi1(*args)
i8_bit_hi1 = _sobol.i8_bit_hi1

def i8_bit_lo0(*args):
  return _sobol.i8_bit_lo0(*args)
i8_bit_lo0 = _sobol.i8_bit_lo0

def i8_max(*args):
  return _sobol.i8_max(*args)
i8_max = _sobol.i8_max

def i8_min(*args):
  return _sobol.i8_min(*args)
i8_min = _sobol.i8_min

def i8_sobol(*args):
  return _sobol.i8_sobol(*args)
i8_sobol = _sobol.i8_sobol

def i8_sobol_generate(*args):
  return _sobol.i8_sobol_generate(*args)
i8_sobol_generate = _sobol.i8_sobol_generate

def i8_uniform(*args):
  return _sobol.i8_uniform(*args)
i8_uniform = _sobol.i8_uniform

def r4_abs(*args):
  return _sobol.r4_abs(*args)
r4_abs = _sobol.r4_abs

def r4_nint(*args):
  return _sobol.r4_nint(*args)
r4_nint = _sobol.r4_nint

def r4_uniform_01(*args):
  return _sobol.r4_uniform_01(*args)
r4_uniform_01 = _sobol.r4_uniform_01

def r8_abs(*args):
  return _sobol.r8_abs(*args)
r8_abs = _sobol.r8_abs

def r8_nint(*args):
  return _sobol.r8_nint(*args)
r8_nint = _sobol.r8_nint

def r8_uniform_01(*args):
  return _sobol.r8_uniform_01(*args)
r8_uniform_01 = _sobol.r8_uniform_01

def r8mat_write(*args):
  return _sobol.r8mat_write(*args)
r8mat_write = _sobol.r8mat_write

def tau_sobol(*args):
  return _sobol.tau_sobol(*args)
tau_sobol = _sobol.tau_sobol

def timestamp():
  return _sobol.timestamp()
timestamp = _sobol.timestamp
# This file is compatible with both classic and new-style classes.


